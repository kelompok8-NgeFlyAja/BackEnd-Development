generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airports {
  id              Int      @id @default(autoincrement())
  name            String
  city            String
  country         String
  continent       String
  airportCode     String   @unique
  arrivalRoutes   Routes[] @relation("ArrivalAirport")
  departureRoutes Routes[] @relation("DepartureAirport")
}

model Routes {
  id                 Int         @id @default(autoincrement())
  departureAirportId Int
  arrivalAirportId   Int
  seatClassId        Int         @unique
  flights            Flights?
  arrivalAirport     Airports    @relation("ArrivalAirport", fields: [arrivalAirportId], references: [id], onDelete: Cascade)
  departureAirport   Airports    @relation("DepartureAirport", fields: [departureAirportId], references: [id], onDelete: Cascade)
  seatClass          SeatClasses @relation(fields: [seatClassId], references: [id], onDelete: Cascade)
}

model Flights {
  id            Int         @id @default(autoincrement())
  routeId       Int         @unique
  planeId       Int         @unique
  promotionId   Int?        @unique
  duration      String
  departureTime DateTime    @db.Timestamptz(3)
  arrivalTime   DateTime    @db.Timestamptz(3)
  flightCode    String
  bookings      Bookings[]
  plane         Planes      @relation(fields: [planeId], references: [id], onDelete: Cascade)
  promotion     Promotions? @relation(fields: [promotionId], references: [id])
  route         Routes      @relation(fields: [routeId], references: [id], onDelete: Cascade)
}

model Planes {
  id           Int      @id @default(autoincrement())
  planeName    String
  totalSeat    Int
  planeCode    String
  description  String
  baggage      Int
  cabinBaggage Int
  flights      Flights?
  seats        Seats[]
}

model Seats {
  id          Int         @id @default(autoincrement())
  planeId     Int
  seatNumber  String
  isAvailable Boolean
  passengers  Passengers?
  plane       Planes      @relation(fields: [planeId], references: [id], onDelete: Cascade)
}

model Users {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  phoneNumber String
  password    String
  isActivated Boolean
  bookings    Bookings[]
}

model Bookings {
  id             Int          @id @default(autoincrement())
  userId         Int
  flightId       Int
  bookingCode    String
  bookingDate    DateTime     @db.Timestamptz(3)
  bookerName     String
  bookerEmail    String
  bookerPhone    String
  totalPrice     Int
  adultPassenger Int          @default(0)
  babyPassenger  Int          @default(0)
  childPassenger Int          @default(0)
  status         String
  flight         Flights      @relation(fields: [flightId], references: [id], onDelete: Cascade)
  user           Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  passengers     Passengers[]
  payments       Payments?
}

model Passengers {
  id              Int      @id @default(autoincrement())
  bookingId       Int
  title           String
  fullName        String
  familyName      String
  birthDate       DateTime @db.Timestamptz(3)
  nationality     String
  identityNumber  String
  identityCountry String
  identityExpired DateTime @db.Timestamptz(3)
  seatId          Int      @unique
  booking         Bookings @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seat            Seats    @relation(fields: [seatId], references: [id], onDelete: Cascade)
}

model Payments {
  id            Int      @id @default(autoincrement())
  bookingId     Int      @unique
  paymentMethod String
  amount        Int
  expiredDate   DateTime @db.Timestamptz(3)
  status        String
  booking       Bookings @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Promotions {
  id            Int      @id @default(autoincrement())
  promotionName String
  image         String
  startDate     DateTime @db.Timestamptz(3)
  endDate       DateTime @db.Timestamptz(3)
  discount      Int
  flights       Flights?
}

model SeatClasses {
  id         Int     @id @default(autoincrement())
  name       String
  priceAdult Int
  priceChild Int
  priceBaby  Int
  route      Routes?
}
